<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Joey's Blog]]></title>
  <subtitle><![CDATA[my codeing road]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://joeyzone.github.io/"/>
  <updated>2015-11-19T05:32:01.000Z</updated>
  <id>http://joeyzone.github.io/</id>
  
  <author>
    <name><![CDATA[Joey-鲁俊]]></name>
    <email><![CDATA[joeyzone@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[浅谈前端mvvm]]></title>
    <link href="http://joeyzone.github.io/2015/11/19/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AFmvvm/"/>
    <id>http://joeyzone.github.io/2015/11/19/浅谈前端mvvm/</id>
    <published>2015-11-19T05:30:54.000Z</published>
    <updated>2015-11-19T05:32:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="浅谈前端mvvm模式及knockoutJS">浅谈前端mvvm模式及knockoutJS</h1><p>GUI程序都面临一个问题，用户操作界面行为。执行业务逻辑，可能导致程序数据的更新。同时数据的更新又要显示在展示界面上。例如对一个表格中，点击手机号一列的头部，这一列根据数据中的国籍所有手机号全部加86或者其他前缀。</p>
<p>基于职责分离的思想都会对应用程序进行分层。用户界面为View，程序的数据为Model，有了这两个自然想到了他们之间的桥梁所以就会产生出MV*(MV-whatever)。</p>
<p>MVC。这就是最熟知的MVC。也就是Smalltalk-80 MVC</p>
<p>严格的MVC关系应该如下图,这里我们不说服务器端的MVC。只针对前端GUI程序。</p>
<p><img src="http://camo.githubusercontent.com/b89ac314c2fd554e7bf33ba1553e10dd91be44fc/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76632d63616c6c2e706e67" width="50%"></p>
<ol>
<li>View是把控制权交移给Controller，自己不执行业务逻辑。</li>
<li>Controller执行业务逻辑并且操作Model，但不会直接操作View，可以说它是对View无知的。</li>
<li>View和Model的同步消息是通过观察者模式进行，而同步操作是由View自己请求Model的数据然后对视图进行更新。</li>
</ol>
<p>第一点没什么好说的。第二点，controller操作Model。但是不会直接操作View。view的变化是通过Model的变化而变化。</p>
<p>那么View是怎么做到对Model的通知的。这就用到观察者模式了。简单描述一下，先把Model中的数据在pubsub对象中监听起来。subscribe。等到Model变化时，pubsub对象publish。</p>
<p>MVP模式</p>
<p><img src="https://camo.githubusercontent.com/082052805716330b7c168b8bcd968ffb085b4c21/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76702d63616c6c2e706e67" width="50%"></p>
<p>MVVM可以看作是一种特殊的MVP（Passive View）模式，或者说是对MVP模式的一种改良。</p>
<p>2005年微软工程师John Gossman在自己的博客上首次公布了MVVM模式。<br>MVVM代表的是Model-View-ViewModel，什么是ViewModel？他不仅储存了model（Model中需要展示的部分）。他还包括了视图的状态。这点是最关键的。</p>
<p><img src="http://camo.githubusercontent.com/61ef7578cd46b1d37dd3ea52ce0a3be570e427cc/687474703a2f2f6c69766f7261732e6769746875622e696f2f626c6f672f6d76632f6d76766d2d63616c6c2e706e67" width="50%;/"></p>
<p>Binder可以理解成一个数据绑定引擎。当Model发生变化时，直接通知ViewModel中的模板引擎，最后渲染到view。<br>具体数据如何绑定请看之前的<a href="http://joeyzone.github.io/2015/05/04/Two-way-data-binding-%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/" target="_blank">一篇博文</a></p>
<p>我们拿knockJS来举例说明mvvm是怎样的一种分层思想。</p>
<p>早在2010年，knockoutJS就已出现在git上，现在社区的活跃度依然是很高的.</p>
<p>knockoutJS简称KO，现在版本已经到了3.3了。不需要任何依赖，自带页面模板。直接引用就能用，并且压缩后代码只有50k。</p>
<p>我们一步一步按照knockoutJS的官网教程来，这里的教程只适用3.0以后的。</p>
<p>KO的三大核心功能：</p>
<ol>
<li>监听(observables)和依赖追踪</li>
<li>申明式绑定</li>
<li>模板</li>
</ol>
<p>Model-View-View Model (MVVM)是一个建立用户界面程序的设计模式，它描述了你能的分离复杂的UI为3个部分。（原谅我的翻译水平）</p>
<pre><code><span class="keyword">var</span> myViewModel = {
    personName: <span class="string">'Bob'</span>,
    personAge: <span class="number">123</span>
};
</code></pre><p>你可以生成一个简单的view。like this：</p>
<pre><code>The <span class="property">name</span> <span class="keyword">is</span> &lt;span data-bind=<span class="string">"text: personName"</span>&gt;&lt;/span&gt;
</code></pre><p>这时，你的页面是不起作用的，因为你还没有用到KO呢。</p>
<p>To activate Knockout, add the following line to a \<script\> block:</script\></p>
<pre><code>ko.applyBindings(myViewModel);
</code></pre><p>Pretty simple, really.</p>
<p>但是此时KO的用处也就是一个页面模板和声明式绑定（单向，非auto），它有三大核心功能呢。跟我们所想的View-Model不一样啊。</p>
<p>比如我此时:</p>
<pre><code>myViewModel.personName = <span class="string">'Tom'</span>;
</code></pre><p>页面没有变化。</p>
<p>How can KO know when parts of your view model change? Answer: you need to declare your model properties as observables,</p>
<p>重写我们的myViewModel</p>
<pre><code><span class="component">var myViewModel = {
    personName: ko<span class="string">.observable('Bob')</span>,
    personAge: ko<span class="string">.observable(123)</span>
}</span>;
</code></pre><p>但此时仍然显示的是Bob不是Tom。为什么呢？因为我们已经用KO的observable的属性，读和写都要用KO的方式。</p>
<p>myViewModel.personName() will return ‘Bob’,calling myViewModel.personName(‘Mary’) will change the name value to ‘Mary’.</p>
<p>针对更高级的用户，如果你想注册你自己的活动当observables变化时。</p>
<pre><code>myViewModel.personName.subscribe(<span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>{
    alert(<span class="string">"The person's new name is "</span> + newValue);
});
</code></pre><p>还有一点需要说明，并不是<br>还可以取消订阅，具体看网站文档吧。不详述了。</p>
<p>同时。KO也可监听数组ko.observableArray();</p>
<h4 id="computed_observables(计算属性)">computed observables(计算属性)</h4><p>如果你得到一个observable对象是firstName,另一个是lastName。但是你要显示的是fullName。这时候computed就来了。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">AppViewModel</span><span class="params">()</span> </span>{
    <span class="keyword">this</span>.firstName = ko.observable(<span class="string">'Bob'</span>);
    <span class="keyword">this</span>.lastName = ko.observable(<span class="string">'Smith'</span>);

    <span class="keyword">this</span>.fullName = ko.computed(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="keyword">this</span>.firstName() + <span class="string">" "</span> + <span class="keyword">this</span>.lastName();
    }, <span class="keyword">this</span>);
}
</code></pre><p>这时，KO的核心功能最后一个，依赖追踪也就解释了。计算属性提供了一条依赖链，fullName依赖firstName和lastName。</p>
<p>讲到这，KO的基本也就讲完了。KO还有一些进阶的东西下面只做补充：</p>
<h6 id="Pure_computed_observables">Pure computed observables</h6><p>如果计算属性只是单纯的‘计算’，推荐pureComputed更加有效。这是3.2才有的。</p>
<p>Writable computed observables</p>
<p>The “template” binding</p>
<p>Components</p>
<p>参考文档：</p>
<blockquote>
<p><a href="https://github.com/livoras/blog/issues/11" target="_blank" rel="external">https://github.com/livoras/blog/issues/11</a></p>
<p><a href="http://knockoutjs.com/index.html" target="_blank" rel="external">http://knockoutjs.com/index.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="浅谈前端mvvm模式及knockoutJS">浅谈前端mvvm模式及knockoutJS</h1><p>GUI程序都面临一个问题，用户操作界面行为。执行业务逻辑，可能导致程序数据的更新。同时数据的更新又要显示在展示界面上。例如对一个表格中，点击手机号一列的头部，这]]>
    </summary>
    
      <category term="javascript" scheme="http://joeyzone.github.io/tags/javascript/"/>
    
      <category term="javascript-code" scheme="http://joeyzone.github.io/categories/javascript-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodeJS流的理解]]></title>
    <link href="http://joeyzone.github.io/2015/10/14/nodeJS%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://joeyzone.github.io/2015/10/14/nodeJS流的理解/</id>
    <published>2015-10-14T06:51:50.000Z</published>
    <updated>2015-10-30T09:31:36.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/1014.jpg" width="100%"></p>
<p>流是一个抽象接口，被 Node 中的很多对象所实现。比如对一个 HTTP 服务器的请求是一个流，stdout 也是一个流。流是可读、可写或兼具两者的。所有流都是 EventEmitter 的实例。</p>
<p>可以通过require(‘stream’)加载Stream基类。其中包括了 Readable 流、Writable 流、Duplex 流和 Transform 流的基类。</p>
<p>流（Stream），我们先说流的使用。这部分比较简单。</p>
<pre><code><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);
<span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>{
    <span class="keyword">var</span> body = <span class="string">''</span>;
    req.setEncoding(<span class="string">'utf8'</span>);
    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(chunk)</span> </span>{
        body += chunk;
    });
    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">try</span> {
            <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(body);
        } <span class="keyword">catch</span> (er) {
            res.statusCode = <span class="number">400</span>;
            <span class="keyword">return</span> res.end(<span class="string">'错误: '</span> + er.message);
        }
        res.write(<span class="keyword">typeof</span> data);
        res.end();
    }
});
server.listen(<span class="number">1337</span>);
</code></pre><p>就像这样，req就是一个流，它怎么产生的，我们不知道，只知道是网页请求然后被createServer这个方法做了某些事，把httpRequest包装成了req流。不管，反正我们有个req流对象了。再深入点，官网说是An IncomingMessage object，It implements the Readable Stream interface。那res就是 implements Writable Stream interface。</p>
<p>这段代码来自node官网。应该比较容易理解。流之所以称之为流，是因为像水流一样。这样说还是抽象。<br>Readable流有两种模式。流动模式和暂停模式。就像自来水一样。流动模式就是读出数据。流默认处于暂停模式。</p>
<p>有三种方法可以切换到流动模式。(打开水龙头)</p>
<p>流对象监听一个’data’事件。</p>
<p>流对象直接调用resume方法。开启流数据。</p>
<p>调用pipe()方法把数据写到一个Writeable stream。</p>
<p>三种方法,分两种情况切换流到暂停模式。(关闭水龙头)</p>
<p>如果没有导流目标,也就是没有Writeable stream接收。调用pause()方法。</p>
<p>如果有导流目标。移除所有’data’事件处理器。或者调用unpipe()方法移除所有导流目标。这里不是或者，应该是视情况而定。</p>
<p>我们再回到官网的这个代码例子。这样写规避了一个问题。body += chunk;其实是把req流的数据暂时存到body变量。</p>
<p>如果一个程序是需要及时读写的呢？</p>
<p>我们大概会这样写：</p>
<pre><code><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);
<span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'/path/to/source'</span>);
<span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'/path/to/dest'</span>);

readStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(chunk)</span> </span>{ <span class="comment">// 当有数据流出时，写入数据</span>
    writeStream.write(chunk);
});

readStream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">// 当没有数据时，关闭数据流</span>
    writeStream.end();
});
</code></pre><p>这样写就会有问题。如果写入速度跟不上流的读取速度，可能会导致数据丢失。因此，正常情况是，读一段，写一段，如果没写完，就暂停。等写完再读。<br>于是代码改为：</p>
<pre><code><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);
<span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'/path/to/source'</span>);
<span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'/path/to/dest'</span>);

readStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(chunk)</span> </span>{ <span class="comment">// 当有数据流出时，写入数据</span>
    <span class="keyword">if</span> (writeStream.write(chunk) === <span class="literal">false</span>) { <span class="comment">// 如果没有写完，暂停读取流</span>
        readStream.pause();
    }
});

writeStream.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">// 写完后，继续读取</span>
    readStream.resume();
});

readStream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">// 当没有数据时，关闭数据流</span>
    writeStream.end();
});
</code></pre><p>其实这就是个copy嘛。每次都要写这么大段代码？于是我们有了pipe</p>
<pre><code>// pipe自动调用了data,end等事件
<span class="built_in">fs</span>.createReadStream('/<span class="built_in">path</span>/to/source').pipe(<span class="built_in">fs</span>.createWriteStream('/<span class="built_in">path</span>/to/dest'));
</code></pre><p>有关Writable stream,这里重点介绍对象的’drain’事件。上面的代码也用到了。</p>
<p>在写进流的过程中，node不一定及时把数据写入stream中。这时，node会将数据保存在缓冲队列。在适当的时候再写入正确的位置。这个时候就需要’drain’事件了。</p>
<p>write方法如果没有写完的话，返回为false。注意，这里chunk解释为一个数据块。连一个readable stream的小块都没有写完，当然不能接收下一个块了，不然会产生丢失。分块读写也是我们为什么使用流的好处之一。于是我们暂停了读取流。</p>
<p>stream.Duplex和stream.Transform</p>
<p>他们都同时实现了 Readable 和 Writable 的接口   </p>
<p>转换（Transform）流是一种输出由输入计算所得的双工流。</p>
<p>其实这四个类都是实现了相对应的方法的抽象类。你要实现自己的流时，也必须实现相应的方法。</p>
<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/10141.png" width="100%"></p>
<p>在您的实现代码中，十分重要的一点是绝对不要调用上文面向流消费者的 API 中所描述的方法，否则可能在消费您的流接口的程序中产生潜在的副作用。</p>
<p>我们具体介绍下Readable的实现。<br>这是一个 Readable 流的基本例子。它将从 1 至 1,000,000 递增地触发数字，然后结束。</p>
<pre><code><span class="keyword">var</span> Readable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Readable;
<span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);
util.inherits(Counter, Readable);


<span class="function"><span class="keyword">function</span> <span class="title">Counter</span><span class="params">(opt)</span> </span>{
  Readable.call(<span class="keyword">this</span>, opt);
  <span class="keyword">this</span>._max = <span class="number">1000000</span>;
  <span class="keyword">this</span>._index = <span class="number">1</span>;
}


Counter.prototype._read = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
  <span class="keyword">var</span> i = <span class="keyword">this</span>._index++;
  <span class="keyword">if</span> (i &gt; <span class="keyword">this</span>._max)
    <span class="keyword">this</span>.push(<span class="literal">null</span>);
  <span class="keyword">else</span> {
    <span class="keyword">var</span> str = <span class="string">''</span> + i;
    <span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(str, <span class="string">'ascii'</span>);
    <span class="keyword">this</span>.push(buf);
  }
};
</code></pre><p>上面例子我们实现了一个叫Counter的只读流，我们实现了它的_read方法。<br>push这个方法同样应该被 Readable 实现者调用，而不是Readable 流直接调用。</p>
<p>push() 方法会明确地向读取队列中插入一些数据。如果调用它时传入了 null 参数，那么它会触发数据结束信号（EOF）。</p>
<p>Readable构造方法的参数options有个属性objectMode。<br>objectMode {Boolean} : 该流是否应该表现为对象的流。意思是说 stream.read(n) 返回一个单独的对象，而不是大小为 n 的 Buffer<br>刚看这段话的时候其实我是不懂的。直到我读了gulp-relace插件的源码。主动把objectMode设为了true。再仔细一想，就懂了。</p>
<p>用中文解释这句话就是，一般情况下Readable流的read方法返回的是大小为n的Buffer，但是设置了true之后，返回的是一个对象。说了等于没说。</p>
<p>拿gulp举例。</p>
<pre><code>gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> gulp.src(<span class="string">'./src/**/*.js'</span>)
        .pipe(uglify())
        .pipe(concat(<span class="string">'all.min.js'</span>))
        .pipe(gulp.dest(<span class="string">'build/'</span>));
});
</code></pre><p>这是一个普通gulp的task写法。但是如果这样写呢？</p>
<pre><code>var uglify = <span class="keyword">require</span>(<span class="string">'gulp-uglify'</span>),
<span class="keyword">rename</span> = <span class="keyword">require</span>(<span class="string">'gulp-rename'</span>);
gulp.task(<span class="string">'bundle'</span>, function() {
    <span class="keyword">return</span> fs.createReadStream(<span class="string">'app.js'</span>)
        .<span class="keyword">pipe</span>(uglify())
        .<span class="keyword">pipe</span>(<span class="keyword">rename</span>(<span class="string">'bundle.min.js'</span>))
        .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'dist/'</span>));
});
</code></pre><p>fs.createReadStream(‘app.js’)生成一个只读流，然后pipe出来，看起来和第一种写法是一样的。但是运行之后会报错，这是为啥呢？原因就是gulp插件希望得到的流是一个Vinyl文件对象。这就是为啥gulp插件<br>会设置objectMode为true的原因。</p>
<p>我们先来说下Buffer</p>
<p>在nodeJS中，Buffer是随Node内核一起发布的核心库。可以让Node处理二进制数据。</p>
<p>我们现在来监听一下data时间，看下数据碎片</p>
<pre><code><span class="title">fs</span>.createReadStream('a.txt').on('<span class="typedef"><span class="keyword">data</span>', function<span class="container">(<span class="title">chunk</span>)</span> <span class="container">{
    <span class="title">console</span>.<span class="title">log</span>('<span class="type">Read</span> %<span class="title">d</span> <span class="title">bytes</span> <span class="title">of</span> <span class="title">data'</span>, <span class="title">chunk</span>.<span class="title">length</span>);
}</span>);</span>
&gt; <span class="type">Read</span> <span class="number">65536</span> bytes <span class="keyword">of</span> <span class="typedef"><span class="keyword">data</span></span>
&gt; <span class="type">Read</span> <span class="number">65536</span> bytes <span class="keyword">of</span> <span class="typedef"><span class="keyword">data</span></span>
&gt; <span class="type">Read</span> <span class="number">65536</span> bytes <span class="keyword">of</span> <span class="typedef"><span class="keyword">data</span></span>
&gt; <span class="type">Read</span> <span class="number">65536</span> bytes <span class="keyword">of</span> <span class="typedef"><span class="keyword">data</span></span>
&gt; ...
</code></pre><p>我们先来看看用gulp<br>    gulp.src(‘/usr/share/dict/words’).on(‘data’, function(file) {<br>        console.log(‘Read %d bytes of data’, file.contents.length);<br>    });</p>
<pre><code>&gt; <span class="type">Read</span> <span class="number">2493109</span> bytes <span class="keyword">of</span> <span class="typedef"><span class="keyword">data</span></span>
</code></pre><p>gulp.src()会将内容转化成buffer后的虚拟文件vinyl。vinyl对象拥有一个属性表示里面是buffer还是流，<br>gulp默认使用buffer。因为gulp有些地方是必须用buffer而不是stream的，比如jshint。</p>
<h3 id="未完待续……">未完待续……</h3>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/1014.jpg" width="100%"></p>
<p>流是一个抽象接口，被 Node 中的很多对象所实现。比如对一个 HTTP 服务器的请求是一个流，stdout 也是一]]>
    </summary>
    
      <category term="nodeJS" scheme="http://joeyzone.github.io/tags/nodeJS/"/>
    
      <category term="nodeJS" scheme="http://joeyzone.github.io/categories/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解ReactJS的Flux单向数据流]]></title>
    <link href="http://joeyzone.github.io/2015/07/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ReactJS%E7%9A%84Flux%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://joeyzone.github.io/2015/07/21/深入理解ReactJS的Flux单向数据流/</id>
    <published>2015-07-21T09:59:43.000Z</published>
    <updated>2015-07-21T10:01:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="深入理解ReactJS的Flux单向数据流">深入理解ReactJS的Flux单向数据流</h2><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/720.jpg" width="100%"></p>
<h3 id="最近看了些reactJS，想要总结一下。">最近看了些reactJS，想要总结一下。</h3><p>对ReactJS完全不了解的可以参考下阮一峰的博文，入门ReactJS<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/03/react.html</a></p>
<p>reactJS和Flux是什么关系呢？</p>
<p>其实说来reactJS算是一种新语言了，叫做JSX。<br>他只不过用了一个一个JSXTransformer的东西把JSX”编译”成了大家都认识的js。<br>当然这种东西线上是不会用的。线上用的是”编译”过的正常js。</p>
<p>以前写页面都是html+JS,现在Reactjs全用JS写，html写在JS里面。由于ReactJS用的virtual DOM。一切也就能合理解释了。据说相比传统的DOM操作速度几乎没影响，但比你用JQ操作应该更快，呵呵。</p>
<p>virtual DOM到底是个什么东西？<br>这里不作为本篇文章的重点介绍。当然他是ReactJS的核心部分。<br>简单来说就是当数据改变时，ReactJS改变的不是整个Component。而是找和之前组件的变化点来更新。<br>具体参考文档<br><a href="http://facebook.github.io/react/blog/2013/06/05/why-react.html#reactive-updates-are-dead-simple." target="_blank" rel="external">http://facebook.github.io/react/blog/2013/06/05/why-react.html#reactive-updates-are-dead-simple.</a></p>
<p>接下来讲介绍Flux了。这也是这篇文章的重点。要读懂下面部分首先要对ReactJS稍有概念和了解即可。读懂还不够，要实际操作的话需要有一定webpack基础。我的前一篇博文应该有比较详细的介绍。</p>
<p>首先说明就是Flux是写ReactJS所需要遵循的一种标准。至少facebook的开发者们认为这是一种非常好的组织代码的架构。</p>
<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/flux-diagram.png" width="90%"></p>
<p>这张神图是官方无论在哪解释Flux都要用到的。<br>我们就来看图说话吧。<br>首先，这个图有个圈，并且圈中数据是单向流动的。</p>
<p>其次，这个图左边有两个双向箭头，不知道干嘛用的，呵呵。</p>
<p>那我们一个个来破这个闷。</p>
<p>右边那个大的单向箭头圈，说明的是Flux遵循的是一种单向的数据流。</p>
<p>首先每个ActionCreator模块用于创建action。并传递给相应的Dispatcher。</p>
<pre><code><span class="tag">receiveAll</span>: <span class="tag">function</span>(rawMessages) {
    <span class="tag">ChatAppDispatcher</span><span class="class">.dispatch</span>({
      <span class="attribute">type</span>: ActionTypes.RECEIVE_RAW_MESSAGES,
      <span class="attribute">rawMessages</span>: rawMessages
    });
  }
</code></pre><p>那Dispatcher在哪接受呢？Dispatcher通过在Store中注册一个回调函数（callback）来接收action。</p>
<pre><code>MessageStore.dispatchToken = ChatAppDispatcher.register(<span class="function"><span class="keyword">function</span><span class="params">(action)</span></span> {

  switch(<span class="keyword">action</span>.<span class="keyword">type</span>) {
    <span class="keyword">case</span> ActionTypes.RECEIVE_RAW_MESSAGES:
          _addMessages(<span class="keyword">action</span>.rawMessages);
          ChatAppDispatcher.waitFor([ThreadStore.dispatchToken]);
          _markAllInThreadRead(ThreadStore.getCurrentID());
          MessageStore.emitChange();
      break;

    <span class="keyword">default</span>:
      // <span class="keyword">do</span> nothing
  }

});
</code></pre><p>Store拿到从action中携带的数据后，先处理数据，其中可能包含和其他Store的通信。<br>处理完之后非常重要的一点。抛出Store的Change事件。<br>在React Views中，组件componentWillUnmount状态后监听这个事件并处理。setState组件中的数据并且会影响到UI(user interaction)。</p>
<p>在Store中我刻意忽略了waitFor。这十分十分重要。现在我们来讲讲waitFor。<br>随着应用规模的增长。Store之间也会变得有依赖关系。waitFor就是如他字面意思一样。等它先执行才能执行后面。<br><a href="http://facebook.github.io/flux/docs/dispatcher.html" target="_blank" rel="external">http://facebook.github.io/flux/docs/dispatcher.html</a><br>这是Flux官方解释dispatcher的例子。</p>
<p>有三个Store，国家，城市，机票价格。这里机票价格只和城市联动。</p>
<pre><code>CityStore.dispatchToken = flightDispatcher.register(<span class="function"><span class="keyword">function</span><span class="params">(payload)</span> </span>{
      <span class="keyword">if</span> (payload.actionType === <span class="string">'country-update'</span>) {
        <span class="comment">// `CountryStore.country` may not be updated.</span>
        flightDispatcher.waitFor([CountryStore.dispatchToken]);
        <span class="comment">// `CountryStore.country` is now guaranteed to be updated.</span>

        <span class="comment">// Select the default city for the new country</span>
        CityStore.city = getDefaultCityForCountry(CountryStore.country);
      }
});
</code></pre><p>这里举个例子，只有当国家改变，注册事件完成后，才能完成后面的根据国家设置默认城市。</p>
<p>Web API Utils就是一个API和Action Creat之间的桥梁，当Utils取得数据时，会通知Action。而当Action有数据要提交到服务器时也是通过它。</p>
<p>这样，这个图就解释完了。<br>主要参考了<a href="https://github.com/facebook/flux/tree/master/examples/flux-chat" target="_blank" rel="external">https://github.com/facebook/flux/tree/master/examples/flux-chat</a>。</p>
<p>再多说几句，关于单向的数据流，这些箭头都是单向的。就是说view其实不能直接影响到Store。而只能是Store影响到View。View中的其他状态更改也还是需要从Store中去取的。</p>
<h3 id="参考：">参考：</h3><p><a href="http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html" target="_blank" rel="external">Flux: Actions and the Dispatcher</a></p>
<p><a href="http://segmentfault.com/a/1190000002530862" target="_blank" rel="external">Flux: Actions and the Dispatcher 中文翻译</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="深入理解ReactJS的Flux单向数据流">深入理解ReactJS的Flux单向数据流</h2><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/720.jpg" width="100%"></p>
<h3 i]]>
    </summary>
    
      <category term="javascript" scheme="http://joeyzone.github.io/tags/javascript/"/>
    
      <category term="javascript-code" scheme="http://joeyzone.github.io/categories/javascript-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webpack 初探]]></title>
    <link href="http://joeyzone.github.io/2015/07/21/webpack-%E5%88%9D%E6%8E%A2/"/>
    <id>http://joeyzone.github.io/2015/07/21/webpack-初探/</id>
    <published>2015-07-21T09:59:24.000Z</published>
    <updated>2015-07-21T10:00:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Webpack_初探">Webpack 初探</h2><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/goros.jpg" width="" 95%=""><br>以前文章我介绍过commonJS。也比较过AMD和CMD异同。</p>
<p>前端模块化编程已经有些时日了，只是前端标准不统一，造成现在不兼容的局面。但是webpack等打包工具的出现打破了这一切，让前端也终于可以解放双手了。当然他也兼容AMD。</p>
<p>Webpack也出自facebook团队。</p>
<h3 id="安装及使用：">安装及使用：</h3><p>webpack可作为一般的全局npm模块安装</p>
<pre><code>npm <span class="keyword">install</span> -g webpack
</code></pre><p>之后我们可以新建一个目录</p>
<pre><code>mkdir webpack_<span class="built_in">test</span>
<span class="built_in">cd</span> webpack_<span class="built_in">test</span>
touch webpack.config.js
</code></pre><p>这样，一个简单的环境就搭建起来了。<br>然后打开webpack.config.js文件。复制下面配置</p>
<pre><code><span class="module"><span class="keyword">module</span>.exports = </span>{
      entry:[
    <span class="string">'./app/main.js'</span>
      ],
      output: {
        path: __dirname + <span class="string">'/assets/'</span>,
            publicPath: <span class="string">"/assets/"</span>,
        filename: <span class="string">'bundle.js'</span>
      }
};
</code></pre><p>其中entry参数定义了打包的文件入口。数组中文件会按顺序打包。<br>entry数组中所有有文件会打包成bundle.js</p>
<p>如果写成这样就会分别打包。</p>
<pre><code><span class="string">entry:</span> {
<span class="label">    a:</span> <span class="string">"./about/about"</span>,
<span class="label">    b:</span><span class="string">"./homePage/index"</span>
},    
<span class="string">output:</span> {
<span class="label">    path:</span> __dirname + <span class="string">'/assets/'</span>,
<span class="label">    publicPath:</span> <span class="string">"/assets/"</span>,
<span class="label">    filename:</span> <span class="string">"[name].js"</span>,
<span class="label">    chunkFilename:</span> <span class="string">"[id].js"</span>
}
</code></pre><p>下面这种写法并没有写成a:”./about/about.js”,他会用正则检测文件名并且用对应的loader来打包。</p>
<p>Webpack将项目中用到的一切静态资源都视之为模块，Webpack对它们进行统一的管理以及打包发布，其官方主页用下面这张图来说明Webpack的作用：<br><img src="http://7xiqu0.com1.z0.glb.clouddn.com/3444.jpg" width="95%"></p>
<h3 id="code-splitting">code-splitting</h3><p>其实我上面说的就是代码分离。</p>
<p>翻译一段官网code-splitting的第一段原文。</p>
<p>对于一个大的web应用把所有代码放到一个文件中是很低效的。特别是如果有些代码块只是在特定环境下需要。<br>webpack有一个特性就是能分离你的代码库成为按需加载的‘chunks’。<br>一些其他打包工具称之为’layers’,’rollups’,’fragments’,这个特性被称为‘代码分离’。</p>
<p>这是个可选的特性，你可以在你代码库定义分离点。webpack会管理其依赖，输出文件和运行之类的。</p>
<p>澄清一个误解：代码分离不只是关于挑出公共代码成文共享的chunk。更为重要的是分离代码可以用来分离成按需加载的chunk。这能保证下载很少的代码并且是只有当应用需求时才下载。</p>
<p>Defining a split point</p>
<h5 id="require-ensure_(CommonJs)">require.ensure (CommonJs)</h5><pre><code>require.<span class="function"><span class="title">ensure</span><span class="params">(dependencies, callback)</span></span>
</code></pre><p>This a proposal for the specification of the “require.ensure” method. (Formerly “require.async”.)<br>这里是commonJS的最新标准的写法，可参考wiki上<a href="http://wiki.commonjs.org/wiki/Modules/Async/A" target="_blank" rel="external">http://wiki.commonjs.org/wiki/Modules/Async/A</a></p>
<h5 id="require_(AMD)">require (AMD)</h5><p>The AMD spec defines an asynchronous require method with this definition:</p>
<pre><code><span class="function"><span class="title">require</span><span class="params">(dependencies, callback)</span></span>
</code></pre><p>这里我们上一篇文章有介绍，requireJS-2.0之后为了解决按需执行的bug而加的一个解决方案。</p>
<p>简单来说就是webpack希望你用模块化的编程思想，把代码分成多个模块。反正webpack会帮你处理一切问题，webpack会把当前文件和所有依赖也打包进chunk。甚至css，jpg都给你打包进chunk。让你放心好了。这样编程才是最高效的。</p>
<pre><code><span class="module"><span class="keyword">module</span>.exports = </span>{
      entry: {
        app: <span class="string">"./app.js"</span>,
        vendor: [<span class="string">"jquery"</span>, <span class="string">"underscore"</span>, ...],
      },
      output: {
        filename: <span class="string">"bundle.js"</span>
      },
      plugins: [
        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="comment">/* chunkName= */</span><span class="string">"vendor"</span>, <span class="comment">/* filename= */</span><span class="string">"vendor.bundle.js"</span>)
      ]
};
</code></pre><p>这样会移除所有app这个chunk中的在vendor中有的模块，也就是说，如果app原先有jquery和underscore模块，那会被移除并且转移到vendor.bundle.js中。</p>
<p>其实主要是理解CommonsChunkPlugin这个插件是有什么作用。</p>
<pre><code><span class="collection">{
    entry: <span class="collection">{ a: <span class="string">"./a"</span>, b: <span class="string">"./b"</span> }</span>,
    output: <span class="collection">{ filename: <span class="string">"[name].js"</span> }</span>,
    plugins: <span class="collection">[ new webpack.optimize.CommonsChunkPlugin<span class="list">(<span class="string">"init.js"</span>)</span> ]</span>
}</span>
</code></pre><p>像这样，没有指明特定的entry trunk则表示所有entry中的common部分打包到init.js。</p>
<h3 id="css">css</h3><p>普通的css-loader</p>
<pre><code>npm install style-loader css-loader --<span class="built_in">save</span>-<span class="built_in">dev</span>
</code></pre><p>在配置中加上</p>
<pre><code><span class="string">loaders:</span> [
    { <span class="string">test:</span> <span class="regexp">/\.css$/</span>, <span class="string">loader:</span> <span class="string">"style-loader!css-loader"</span> }
]    
</code></pre><p>并且在代码中加上</p>
<pre><code><span class="built_in">require</span>(<span class="string">"./stylesheet.css"</span>);
</code></pre><p>这样就是把css当做普通模块打包进了trunk中</p>
<pre><code><span class="regexp">//</span> <span class="built_in">module</span>
exports.push([<span class="built_in">module</span>.id, <span class="string">"body{\n    background-color: #000;\n}"</span>, <span class="string">""</span>]);
</code></pre><p>但是有时我们还是觉得分离出单独的css更符合项目规范。</p>
<p>这样你就需要ExtractTextPlugin这个插件了。</p>
<pre><code>plugins: [
    new <span class="function"><span class="title">ExtractTextPlugin</span><span class="params">(<span class="string">"[name].css"</span>)</span></span>
]
</code></pre><p>在loader中这样写就可以了</p>
<pre><code>loader: ExtractTextPlugin.<span class="function"><span class="title">extract</span><span class="params">(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>)</span></span>
</code></pre><p>也可以有common.css</p>
<pre><code>new webpack<span class="class">.optimize</span><span class="class">.CommonsChunkPlugin</span>(<span class="string">"commons"</span>, <span class="string">"commons.js"</span>)
</code></pre><h3 id="loaders">loaders</h3><p>loaders负责转化你应用中源文件,首先你得安装所需的loader</p>
<pre><code>$ npm <span class="operator"><span class="keyword">install</span> xxx-loader <span class="comment">--save</span></span>
</code></pre><p>You can bind loaders to a RegExp via configuration:</p>
<pre><code>{
    <span class="attribute">module</span>: {
        <span class="attribute">loaders</span>: [
            { <span class="attribute">test</span>: <span class="regexp">/\.jade$/</span>, <span class="attribute">loader</span>: <span class="string">"jade"</span> },
            <span class="regexp">//</span> =&gt; <span class="string">"jade"</span> loader <span class="keyword">is</span> used <span class="keyword">for</span> <span class="string">".jade"</span> files

            { <span class="attribute">test</span>: <span class="regexp">/\.css$/</span>, <span class="attribute">loader</span>: <span class="string">"style!css"</span> },
            <span class="regexp">//</span> =&gt; <span class="string">"style"</span> <span class="keyword">and</span> <span class="string">"css"</span> loader <span class="keyword">is</span> used <span class="keyword">for</span> <span class="string">".css"</span> files
            <span class="regexp">//</span> Alternative <span class="attribute">syntax</span>:
            { <span class="attribute">test</span>: <span class="regexp">/\.css$/</span>, <span class="attribute">loaders</span>: [<span class="string">"style"</span>, <span class="string">"css"</span>] },
        ]
    }
}
</code></pre><p>list loader <a href="http://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">http://webpack.github.io/docs/list-of-loaders.html</a></p>
<h3 id="plugins">plugins</h3><p>plugin提供了更丰富的打包功能，这里我只介绍常用的几个。<a href="http://webpack.github.io/docs/list-of-plugins.html" target="_blank" rel="external">http://webpack.github.io/docs/list-of-plugins.html</a><br>CommonsChunkPlugin先前就介绍，这里就不多介绍了。这个我认为是必须的。<br>UglifyJsPlugin 这个不用多介绍了，压缩js的。用法就是new webpack.optimize.UglifyJsPlugin([options])，<br>ExtractTextPlugin 之前css中已经有介绍。</p>
<h3 id="tools">tools</h3><p>你可以用</p>
<pre><code>webpack
</code></pre><p>命令生成打包文件，但是如果只是想调试的话，直接用</p>
<pre><code>webpack-dev-<span class="keyword">server</span>
</code></pre><p>他会启动一个node服务器，并且监听文件的变化生成虚拟的打包文件。并且默认hot mode。秒杀react-hot-loader</p>
<p>当然你也可以在gulp或者grunt中用webpack。更多功能可以参考官网文档<a href="http://webpack.github.io/docs/" target="_blank" rel="external">http://webpack.github.io/docs/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Webpack_初探">Webpack 初探</h2><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/goros.jpg" width="" 95%=""><br>以前文章我介绍过commonJS。也比较过AM]]>
    </summary>
    
      <category term="javascript" scheme="http://joeyzone.github.io/tags/javascript/"/>
    
      <category term="javascript-code" scheme="http://joeyzone.github.io/categories/javascript-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[commonJS & AMD & CMD]]></title>
    <link href="http://joeyzone.github.io/2015/07/10/commonJS-AMD-CMD-%E4%B9%8B%E8%BE%A9/"/>
    <id>http://joeyzone.github.io/2015/07/10/commonJS-AMD-CMD-之辩/</id>
    <published>2015-07-10T06:55:42.000Z</published>
    <updated>2015-07-14T07:31:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="commonJS_&amp;_AMD_&amp;_CMD">commonJS &amp; AMD &amp; CMD</h1><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/top.jpg" width="90%"></p>
<h4 id="这是一个浅显的入门手册（即使不是前端也能轻易理解）">这是一个浅显的入门手册（即使不是前端也能轻易理解）</h4><h4 id="ECMAScript">ECMAScript</h4><p>2015年6月17日，ECMAScript 6发布正式版本，即ECMAScript 2015。在这个刚过去的6月。我们先提一句。他的出现借鉴了commonJS标准，但是肯定是不兼容他的。他推崇的完全就是模块化编程，定义了模块的导入（import）导出（export）。依赖循环的解决方案。对js的模块化编程起到了指导性作用，当然ECMAScript的标准的重要性是不言而喻的。</p>
<p>但是对于这个标准的出现，引用网友的一句话“只要不是最坏的标准，那就一定比没有标准强”。</p>
<h3 id="commonJS">commonJS</h3><p>CommonJS是一个目前JavaScript模块化的事实标准，他的出现当然是社区中得先驱大牛努力的结果。正是他的努力使得js模块化的编程让大众所介绍并认识。可以说是他推动了整个ECMAScript标准的制定。<br>目前已发展到CommonJS/1.1。链接<a href="http://www.commonjs.org" target="_blank" rel="external">http://www.commonjs.org</a></p>
<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/cjs.png"></p>
<p>就像官方网站的说明：javascript不再仅仅为浏览器适用。在服务器端，随着这几年nodeJS的火热，commonJS标准也得到非常广泛的推广。commonjs的终极目标——提供一个类似Python，Ruby和Java标准库。</p>
<p>我们先来介绍下什么事前端模块化编程。</p>
<p>首先我们把模块简单的理解为方法。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">mod1</span><span class="params">()</span></span>{
    ...
}
</code></pre><p>这样mod1污染了全局变量</p>
<p>那我们加个命名空间叫module1。</p>
<pre><code><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>({
    _count : <span class="number">0</span>,
    m1 : <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{
    <span class="comment">//...</span>
    },
    m2 : <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{
    <span class="comment">//...</span>
    }
});
</code></pre><p>而这种方式暴露了_count。</p>
<p>其实最简单也是最常用的是用立即函数的形式</p>
<pre><code><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> _count = <span class="number">0</span>;
    <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="comment">//...</span>
    };
    <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="comment">//...</span>
    };
    <span class="keyword">return</span> {
        m1 : m1,
        m2 : m2
    };
})();
</code></pre><p>这个会带来问题，因为这样的写法肯定不是最优的，还有很多语法糖的东西可以增加，比如全局变量的引入，放大模式等。commonJS产生了，遵从这套标准，意味着任何人写的模块我都能随便引用。再不会有语法糖产生的分歧。</p>
<p>commonJS到底说了些什么呢？其实他只是定义了自己的一套书写模块的规则，<br>简单来说。比如require用来引入模块。<br>export用来导出模块公用部分。当然这些只是白话的说明，<br>具体请参照wiki上的说明（<a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="external">http://wiki.commonjs.org/wiki/CommonJS</a>）。</p>
<p>直到现在，我还在讲CommonJS。这是个服务器端的标准，因为服务器端语言如果没有一套标准，就像写通信没有socket标准。写PHP没有框架是一样的。因此为了推动javascript的服务器端进展。不得不有一套commonJS标准。</p>
<p>但是浏览器端由于偏见或者其他原因，认为网页程序的复杂性有限。模块化有没有都一样。因此它的推广比服务器端node慢很多。<br>但这完全只能算偏见。</p>
<p>浏览器端也需要模块化，但是一个主要的问题你猜是什么。</p>
<pre><code><span class="keyword">var</span> md5 = <span class="built_in">require</span>(<span class="string">'MD5'</span>);
<span class="keyword">var</span> encode_pwd = md5($.cookie(<span class="string">'password'</span>));
</code></pre><p>服务器端代码就在服务器端，也就是在服务器的内存里。而前端代码放在服务器端，需要http请求才能拿到。所以我才说commonJS适用服务器端。因为代码的执行是同步的。服务器端只需等待代码从内存中返回，当然不用做异步。但是浏览器端如果也这样的话当然可以，但是这样就阻塞了后续代码的执行。因为要等待js代码从服务器端返回。</p>
<p>那么浏览器端最优的处理方案就是js的异步加载（由于现在代码流行打包all-in-one。看起来已经不重要，甚至说被抛弃）。这也是为什么前端模块化的一个重要原因，在此之前，前端js代码都是按照书写的顺序依次执行。当然，浏览器并不是按顺序下载的js,下载仍然是并行的，这里可能有点难理解。</p>
<p>那我在这画张图解释下——下载和加载的区别，虽然在所有人都热衷打包代码的大趋势下这些已经不再重要。（为什么要打包代码呢？呵呵）</p>
<p>当然是要减少请求啦。</p>
<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/flow1.jpg" width="80%"></p>
<p>首先，在未打包的情况下，不用requireJS等模块加载器，你会怎么写他们的顺序。</p>
<p>如果这些js文件有的很大，有的很小呢？相信大部分人已经理解，这里我不多赘述模块加载器的异步加载功效。</p>
<h3 id="AMD&amp;CMD">AMD&amp;CMD</h3><h4 id="AMD">AMD</h4><p>浏览器的模块化先驱requireJS是很有代表性的。他提出了参考commonJS的新的AMD标准。</p>
<h4 id="CMD">CMD</h4><p>这个就要说到淘宝的“玉伯”一直以来对requireJS的鄙视，他坚持最大程度的沿用commonJS语法并遵从commonJS标准。自己弄了个seaJS，知乎上两种标准开始了撕逼大战。</p>
<p>两者的共同点就是：<br>都参照了commonJS标准<br>都用于前端模块的异步加载<br>入口都只有一个js文件<br>两者不同点：<br>requireJS属于依赖前置。seaJS属于依赖就近，也就是可以把依赖写在代码中任意一行。<br>requireJS是先执行依赖。seaJS是后（根据require的位置）执行依赖，这里要弄清加载和执行是两个不同的动作，加载都是异步加载。</p>
<p>这是seaJS的写法。这段代码更贴近commonJS的写法。</p>
<pre><code>define(<span class="reserved">function</span>(<span class="built_in">require</span>, exports, <span class="built_in">module</span>) { 
    <span class="reserved">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);
    a.doSomething();
    <span class="reserved">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);
    b.doSomething();
})
</code></pre><p>这是requireJS的写法。</p>
<pre><code>define([<span class="string">'./a'</span>,<span class="string">'./b'</span>],<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>{ 
    a.doSomething();
    b.doSomething();
})
</code></pre><p>虽然看起来是写法上的争执，但是执行上是完全两码事，seaJS推崇按需执行，而requireJS推崇先执行。这点被“玉伯”喷的很惨。原因就是有的模块是“硬依赖”，也就是必须的依赖。还有一类是“软依赖”，比如：</p>
<pre><code><span class="keyword">if</span>(isLogin){
    <span class="reserved">var</span> lgoin_show = <span class="built_in">require</span>(<span class="string">'loginShow'</span>);
    lgoin_show.init();
}
</code></pre><p>requireJS刚开始1.0版本时对此束手无策，只能说不管你需不需要，先执行再说。</p>
<p>但是有一位少年<a href="https://github.com/jrburke/requirejs/issues/183" target="_blank" rel="external">https://github.com/jrburke/requirejs/issues/183</a>在git上提出这个issue。<br>一语惊醒梦中人。requireJS作者答应他在2.0正式版的时候fix it。</p>
<p>于是在requireJS-2.0的更新文档(<a href="https://github.com/jrburke/requirejs/wiki/Upgrading-to-RequireJS-2.0" target="_blank" rel="external">https://github.com/jrburke/requirejs/wiki/Upgrading-to-RequireJS-2.0</a>)中，我们看到了万众期待的</p>
<p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/r2.png"></p>
<pre><code><span class="keyword">if</span>(isLogin){
    <span class="built_in">require</span>([<span class="string">'loginShow'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        loginShowMod.init();
    })
}
</code></pre><p>“玉伯”仍然硬着头皮也要上。说requireJS是有明显bug,而seaJS是无明显bug的。<br>呵呵，requireJS社区和用户都不知道是seaJS多少倍，文档也丰富得多。明显bug真的是臆想吧。</p>
<p>要说到底孰优孰劣，我还是看好requireJS。<br>首先，我们都知道“事务的原子性”，<br>rjs先执行的方式在模块内部错误就能得到处理，<br>而seaJS则不然。</p>
<p>其次，对于习惯了异步加载的同学，会奇怪为啥seaJS中一旦require某个模块，就立马有了呢？<br>这不是同步了吗？<br>其实是seaJS为了达到同步的现象牺牲了部分性能来检测模块中的require字段预先加载好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="commonJS_&amp;_AMD_&amp;_CMD">commonJS &amp; AMD &amp; CMD</h1><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/top.jpg" width="90]]>
    </summary>
    
      <category term="javascript" scheme="http://joeyzone.github.io/tags/javascript/"/>
    
      <category term="javascript-code" scheme="http://joeyzone.github.io/categories/javascript-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Two-way data binding 数据双向绑定]]></title>
    <link href="http://joeyzone.github.io/2015/05/04/Two-way-data-binding-%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://joeyzone.github.io/2015/05/04/Two-way-data-binding-数据双向绑定/</id>
    <published>2015-05-04T03:31:56.000Z</published>
    <updated>2015-05-04T08:37:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="数据双向绑定实现及原理">数据双向绑定实现及原理</h2><h6 id="从AngularJS深入理解数据绑定。">从AngularJS深入理解数据绑定。</h6><h6 id="参考博文_http://teropa-info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest-html">参考博文 <a href="http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html" target="_blank" rel="external">http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html</a></h6><h6 id="中文博文_构建自己的AngularJS_http://www-ituring-com-cn/article/39865">中文博文 构建自己的AngularJS <a href="http://www.ituring.com.cn/article/39865" target="_blank" rel="external">http://www.ituring.com.cn/article/39865</a></h6><h6 id="感谢@EarlyH给本文提供的专业讲座">感谢@EarlyH给本文提供的专业讲座</h6><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/0504.jpg"></p>
<h6 id="本人也未接触过AngularJS，本博文不会畅谈此内容，没接触过AngularJS也不必担心看不懂">本人也未接触过AngularJS，本博文不会畅谈此内容，没接触过AngularJS也不必担心看不懂</h6><h4 id="什么是数据双向绑定">什么是数据双向绑定</h4><p>有些文章也叫数据双向绑定为脏值检查，不同叫法而已。数据绑定，就是一个对象的数据绑定到另一个对象上，双向只是指这个过程是双向的而已。<br>其实在同样遵循ECMAScript协议的Flex。已经自带双向绑定功能。只是在javascript中，需要自己实现。</p>
<h4 id="简单实现">简单实现</h4><p>将需要监听其改变的值和改变后的调用函数储存在一个临时对象中，并把这个临时对象push到监听数组中。</p>
<p>遍历监听数组，对比新值与旧值。看值是否变化决定是否回调</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Scope</span><span class="params">()</span></span>{
    <span class="comment">//储存监听器对象的数组</span>
    this.<span class="variable">$$watchers</span> = [];
}

<span class="comment">//定义$watch方法</span>
Scope.prototype.<span class="variable">$watch</span> = <span class="function"><span class="keyword">function</span><span class="params">(watchFn,listenFn)</span></span>{
    <span class="comment">//私有，临时变量watcher</span>
    <span class="keyword">var</span> watcher = {
        watchFn : watchFn,
        listenFn : listenFn
    };
    <span class="comment">//添加到监听数组</span>
    this.<span class="variable">$$watchers</span>.push(watcher);
}
</code></pre><p>warcher对象里有个watchFn,这是个返回监听值的方法，但返回的是scope对象上的属性值，不能是任意值。这点要理解</p>
<pre><code><span class="comment">//执行脏值检测</span>
Scope.prototype.$digest = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> len = <span class="keyword">this</span>.$$watchers.length;
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i++){
        <span class="keyword">var</span> watch = <span class="keyword">this</span>.$$watchers[i];
        <span class="keyword">var</span> newValue = watch.watchFn(<span class="keyword">this</span>);
        <span class="keyword">var</span> oldValue = watch.last;
        <span class="keyword">if</span>(newValue !== oldValue){
            watch.listenFn(newValue,oldValue,<span class="keyword">this</span>);
        }
        watch.last = newValue;
    }
}
</code></pre><p>但是如果在listenFn再次改变监听中的值，则不会引起脏值检测。<br>或者，如果另外一个监听器也在听同一个值。listenFn1有可能不会回调。由于遍历的顺序问题<br>解决办法就是循环检测，但是不能无止境的循环检测，因此，我们加了一个最大检测次数</p>
<pre><code><span class="comment">//执行脏值检测一次</span>
Scope.prototype.$digestOnce = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> len = <span class="keyword">this</span>.$$watchers.length;
    <span class="keyword">var</span> dirty;
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i++){
        <span class="comment">//this.$$watchers[i].listenFn();</span>
        <span class="keyword">var</span> watch = <span class="keyword">this</span>.$$watchers[i];
        <span class="keyword">var</span> newValue = watch.watchFn(<span class="keyword">this</span>);
        <span class="keyword">var</span> oldValue = watch.last;
        <span class="keyword">if</span>(newValue !== oldValue){
            watch.listenFn(newValue,oldValue,<span class="keyword">this</span>);
            dirty = <span class="literal">true</span>;
        }
        watch.last = newValue;

    }
    <span class="keyword">return</span> dirty;
}
<span class="comment">//执行脏值检测</span>
Scope.prototype.$digest = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> ttl = <span class="number">10</span>;
    <span class="keyword">var</span> dirty;
    <span class="keyword">do</span>{
        dirty = <span class="keyword">this</span>.$digestOnce();
        ttl--;
        <span class="built_in">console</span>.log(<span class="number">1</span>);               
    }<span class="keyword">while</span>(dirty &amp;&amp; ttl &gt; <span class="number">0</span>);
}
</code></pre><p>还有一些小问题，就是判断相等性。如果想检测对象，则自行在Scope的原型中增加判断相等的方法，这里不再赘述。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="数据双向绑定实现及原理">数据双向绑定实现及原理</h2><h6 id="从AngularJS深入理解数据绑定。">从AngularJS深入理解数据绑定。</h6><h6 id="参考博文_http://teropa-info/blog/2013/11/03/ma]]>
    </summary>
    
      <category term="javascript" scheme="http://joeyzone.github.io/tags/javascript/"/>
    
      <category term="javascript-code" scheme="http://joeyzone.github.io/categories/javascript-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mizhe code freamwork instuction]]></title>
    <link href="http://joeyzone.github.io/2015/04/24/mizhe-code-freamwork-instuction/"/>
    <id>http://joeyzone.github.io/2015/04/24/mizhe-code-freamwork-instuction/</id>
    <published>2015-04-24T06:07:52.000Z</published>
    <updated>2015-04-30T02:44:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="米折框架代码说明书">米折框架代码说明书</h2><h6 id="文章结尾有简单代码规范可参考">文章结尾有简单代码规范可参考</h6><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/blog11.jpg"></p>
<h2 id="环境配置">环境配置</h2><ul>
<li>首先在本机安装nodejs及npm</li>
<li><p>安装完成后运行</p>
<pre><code>npm <span class="keyword">install</span> -g bakari-builder
</code></pre></li>
<li><p>从svn下载最新项目代码 svn地址 : <a href="http://svn.mizhe.com/repos/mizhe/trunk" target="_blank" rel="external">http://svn.mizhe.com/repos/mizhe/trunk</a></p>
</li>
<li>进入项目根目录如：cd D://mizhe</li>
<li><p>执行bakari命令</p>
<pre><code><span class="comment">//此命令用来生成测试环境代码及线上压缩代码</span>
bakari build
</code></pre><h5 id="具体bakari的使用方法请参考_https://github-com/EarlyH/bakari-builder">具体bakari的使用方法请参考 <a href="https://github.com/EarlyH/bakari-builder" target="_blank" rel="external">https://github.com/EarlyH/bakari-builder</a></h5></li>
</ul>
<blockquote>
<hr>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="米折框架代码说明书">米折框架代码说明书</h2><h6 id="文章结尾有简单代码规范可参考">文章结尾有简单代码规范可参考</h6><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/blog11.jpg"><]]>
    </summary>
    
      <category term="mizhe" scheme="http://joeyzone.github.io/tags/mizhe/"/>
    
      <category term="mizhe" scheme="http://joeyzone.github.io/categories/mizhe/"/>
    
  </entry>
  
</feed>