<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Joey's Blog]]></title>
  <subtitle><![CDATA[my codeing road]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://joeyzone.github.io/"/>
  <updated>2015-05-04T08:37:25.000Z</updated>
  <id>http://joeyzone.github.io/</id>
  
  <author>
    <name><![CDATA[Joey-鲁俊]]></name>
    <email><![CDATA[joeyzone@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Two-way data binding 数据双向绑定]]></title>
    <link href="http://joeyzone.github.io/2015/05/04/Two-way-data-binding-%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://joeyzone.github.io/2015/05/04/Two-way-data-binding-数据双向绑定/</id>
    <published>2015-05-04T03:31:56.000Z</published>
    <updated>2015-05-04T08:37:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="数据双向绑定实现及原理">数据双向绑定实现及原理</h2><h6 id="从AngularJS深入理解数据绑定。">从AngularJS深入理解数据绑定。</h6><h6 id="参考博文_http://teropa-info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest-html">参考博文 <a href="http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html" target="_blank" rel="external">http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html</a></h6><h6 id="中文博文_构建自己的AngularJS_http://www-ituring-com-cn/article/39865">中文博文 构建自己的AngularJS <a href="http://www.ituring.com.cn/article/39865" target="_blank" rel="external">http://www.ituring.com.cn/article/39865</a></h6><h6 id="感谢@EarlyH给本文提供的专业讲座">感谢@EarlyH给本文提供的专业讲座</h6><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/0504.jpg"></p>
<h6 id="本人也未接触过AngularJS，本博文不会畅谈此内容，没接触过AngularJS也不必担心看不懂">本人也未接触过AngularJS，本博文不会畅谈此内容，没接触过AngularJS也不必担心看不懂</h6><h4 id="什么是数据双向绑定">什么是数据双向绑定</h4><p>有些文章也叫数据双向绑定为脏值检查，不同叫法而已。数据绑定，就是一个对象的数据绑定到另一个对象上，双向只是指这个过程是双向的而已。<br>其实在同样遵循ECMAScript协议的Flex。已经自带双向绑定功能。只是在javascript中，需要自己实现。</p>
<h4 id="简单实现">简单实现</h4><p>将需要监听其改变的值和改变后的调用函数储存在一个临时对象中，并把这个临时对象push到监听数组中。</p>
<p>遍历监听数组，对比新值与旧值。看值是否变化决定是否回调</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Scope</span><span class="params">()</span></span>{
    <span class="comment">//储存监听器对象的数组</span>
    this.<span class="variable">$$watchers</span> = [];
}

<span class="comment">//定义$watch方法</span>
Scope.prototype.<span class="variable">$watch</span> = <span class="function"><span class="keyword">function</span><span class="params">(watchFn,listenFn)</span></span>{
    <span class="comment">//私有，临时变量watcher</span>
    <span class="keyword">var</span> watcher = {
        watchFn : watchFn,
        listenFn : listenFn
    };
    <span class="comment">//添加到监听数组</span>
    this.<span class="variable">$$watchers</span>.push(watcher);
}
</code></pre><p>warcher对象里有个watchFn,这是个返回监听值的方法，但返回的是scope对象上的属性值，不能是任意值。这点要理解</p>
<pre><code><span class="comment">//执行脏值检测</span>
Scope.prototype.$digest = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> len = <span class="keyword">this</span>.$$watchers.length;
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i++){
        <span class="keyword">var</span> watch = <span class="keyword">this</span>.$$watchers[i];
        <span class="keyword">var</span> newValue = watch.watchFn(<span class="keyword">this</span>);
        <span class="keyword">var</span> oldValue = watch.last;
        <span class="keyword">if</span>(newValue !== oldValue){
            watch.listenFn(newValue,oldValue,<span class="keyword">this</span>);
        }
        watch.last = newValue;
    }
}
</code></pre><p>但是如果在listenFn再次改变监听中的值，则不会引起脏值检测。<br>或者，如果另外一个监听器也在听同一个值。listenFn1有可能不会回调。由于遍历的顺序问题<br>解决办法就是循环检测，但是不能无止境的循环检测，因此，我们加了一个最大检测次数</p>
<pre><code><span class="comment">//执行脏值检测一次</span>
Scope.prototype.$digestOnce = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> len = <span class="keyword">this</span>.$$watchers.length;
    <span class="keyword">var</span> dirty;
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i++){
        <span class="comment">//this.$$watchers[i].listenFn();</span>
        <span class="keyword">var</span> watch = <span class="keyword">this</span>.$$watchers[i];
        <span class="keyword">var</span> newValue = watch.watchFn(<span class="keyword">this</span>);
        <span class="keyword">var</span> oldValue = watch.last;
        <span class="keyword">if</span>(newValue !== oldValue){
            watch.listenFn(newValue,oldValue,<span class="keyword">this</span>);
            dirty = <span class="literal">true</span>;
        }
        watch.last = newValue;

    }
    <span class="keyword">return</span> dirty;
}
<span class="comment">//执行脏值检测</span>
Scope.prototype.$digest = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> ttl = <span class="number">10</span>;
    <span class="keyword">var</span> dirty;
    <span class="keyword">do</span>{
        dirty = <span class="keyword">this</span>.$digestOnce();
        ttl--;
        <span class="built_in">console</span>.log(<span class="number">1</span>);               
    }<span class="keyword">while</span>(dirty &amp;&amp; ttl &gt; <span class="number">0</span>);
}
</code></pre><p>还有一些小问题，就是判断相等性。如果想检测对象，则自行在Scope的原型中增加判断相等的方法，这里不再赘述。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="数据双向绑定实现及原理">数据双向绑定实现及原理</h2><h6 id="从AngularJS深入理解数据绑定。">从AngularJS深入理解数据绑定。</h6><h6 id="参考博文_http://teropa-info/blog/2013/11/03/ma]]>
    </summary>
    
      <category term="javascript" scheme="http://joeyzone.github.io/tags/javascript/"/>
    
      <category term="javascript-code" scheme="http://joeyzone.github.io/categories/javascript-code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mizhe code freamwork instuction]]></title>
    <link href="http://joeyzone.github.io/2015/04/24/mizhe-code-freamwork-instuction/"/>
    <id>http://joeyzone.github.io/2015/04/24/mizhe-code-freamwork-instuction/</id>
    <published>2015-04-24T06:07:52.000Z</published>
    <updated>2015-04-30T02:44:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="米折框架代码说明书">米折框架代码说明书</h2><h6 id="文章结尾有简单代码规范可参考">文章结尾有简单代码规范可参考</h6><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/blog11.jpg"></p>
<h2 id="环境配置">环境配置</h2><ul>
<li>首先在本机安装nodejs及npm</li>
<li><p>安装完成后运行</p>
<pre><code>npm <span class="keyword">install</span> -g bakari-builder
</code></pre></li>
<li><p>从svn下载最新项目代码 svn地址 : <a href="http://svn.mizhe.com/repos/mizhe/trunk" target="_blank" rel="external">http://svn.mizhe.com/repos/mizhe/trunk</a></p>
</li>
<li>进入项目根目录如：cd D://mizhe</li>
<li><p>执行bakari命令</p>
<pre><code><span class="comment">//此命令用来生成测试环境代码及线上压缩代码</span>
bakari build
</code></pre><h5 id="具体bakari的使用方法请参考_https://github-com/EarlyH/bakari-builder">具体bakari的使用方法请参考 <a href="https://github.com/EarlyH/bakari-builder" target="_blank" rel="external">https://github.com/EarlyH/bakari-builder</a></h5></li>
</ul>
<blockquote>
<hr>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="米折框架代码说明书">米折框架代码说明书</h2><h6 id="文章结尾有简单代码规范可参考">文章结尾有简单代码规范可参考</h6><p><img src="http://7xiqu0.com1.z0.glb.clouddn.com/blog11.jpg"><]]>
    </summary>
    
      <category term="mizhe" scheme="http://joeyzone.github.io/tags/mizhe/"/>
    
      <category term="mizhe" scheme="http://joeyzone.github.io/categories/mizhe/"/>
    
  </entry>
  
</feed>